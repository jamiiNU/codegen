/*--------------------------------------------------------------------------*/
/* PWM0 CH4CH5 Configuration                                        		*/
/*--------------------------------------------------------------------------*/

<!clock: {"ALL" : "PWM0" }; !>
<!pin:   {"UsePWM0CH4ENCapBoolean" : {"true":["PWM0_CH4"]} ,
		  "UsePWM0CH5ENCapBoolean" : {"true":["PWM0_CH5"]} ,
		  "UsePWM0CH4ENBoolean" : {"true":["PWM0_CH4"]} ,
		  "UsePWM0CH5ENBoolean" : {"true":["PWM0_CH5"]} }; !>


#define NUCODEGEN_PWM0_CH4_5_FUNC_SEL						(<!id:PWM0CH45FuncSelect;
															type:radio;
															label:Select PWM0 CH4 and CH5 function;
															data:0;
															default:0;
															helper:;
															enum:[0, 1];
															optionLabels:[PWM output waveform, PWM capture];
															dependencies:none;
															dependenciesOption:none;
														    !>)

#define NUCODEGEN_PWM0_CH4_5_CAP_UNITTIME					(<!id:PWM0CH45CapUnitTimeInterger;
															type:integer;
															label:The unit time of counter(ns). ;
															data:1000;
															default:1000;
															helper: It is limited by clock source.;
															minimum:10;
															maximum:85000;
															dependencies:UsePWM0CH4ENCapBoolean|UsePWM0CH5ENCapBoolean;
															dependenciesOption:{"UsePWM0CH4ENCapBoolean":"true","UsePWM0CH5ENCapBoolean":"true"};
															groupId:GroupPWM0Cap45;
															groupName:PWM0 CH4 & CH5 Common Capture Configuration;
															!>)

#define NUCODEGEN_PWM0_CH4_5_CAP_PDMA_ENABLE    			(<!id:UsePWM0CH45PDMAENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 and CH5 with PDMA function;
															data:false;
															default:false;
															dependencies:UsePWM0CH4AdvanceCapBoolean|UsePWM0CH5AdvanceCapBoolean;
															dependenciesOption:{"UsePWM0CH4AdvanceCapBoolean":"true","UsePWM0CH5AdvanceCapBoolean":"true"};
															groupId:GroupPWM0Cap45;
															!>)

#define NUCODEGEN_PWM0_CH4_5_CAP_PDMA_CH_SEL				(<!id:UsePWM0CH45CapPDMACHSel;
															type:radio;
															label:Select PWM0 CH4 capture data or CH5 to PDMA.;
															size:5;
															data:4;
															default:4;
															sort:false;
															enum:[4, 5];
															optionLabels:[CH4, CH5];
															dependencies:[UsePWM0CH45PDMAENCapBoolean, UsePWM0CH4AdvanceCapBoolean, UsePWM0CH5AdvanceCapBoolean];
															dependenciesOption:{"UsePWM0CH45PDMAENCapBoolean":"true","UsePWM0CH4AdvanceCapBoolean":"true","UsePWM0CH5AdvanceCapBoolean":"true"};
															groupId:GroupPWM0Cap45;
															!>)

#define NUCODEGEN_PWM0_CH4_5_CAP_PDMA_DATA_SEL 	            (<!id:UsePWM0CH4CapPDMADataSel;
															type:select;
															label:Select RCAPDATA or FCAPDATA to PDMA.;
															size:5;
															data:PWM_CAPTURE_PDMA_RISING_LATCH;
															default:PWM_CAPTURE_PDMA_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_PDMA_RISING_LATCH, PWM_CAPTURE_PDMA_FALLING_LATCH, PWM_CAPTURE_PDMA_RISING_FALLING_LATCH];
															optionLabels:[RCAPDATA, FCAPDATA, RCAPDATA and FCAPDATA] ;
															dependencies:UsePWM0CH45PDMAENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap45;
															!>)

#define NUCODEGEN_PWM0_CH4_5_CAP_PDMA_FIRST_SEL 	        (<!id:UsePWM0CH4CapPDMAFirstSel;
															type:select;
															label: Select the capture order is rising or falling first.;
															size:5;
															data:0;
															default:0;
															sort:false;
															enum:[0, 1];
															optionLabels:[Falling, Rising] ;
															dependencies:UsePWM0CH45PDMAENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap45;
															!>)															
															
#define NUCODEGEN_PWM0_CH4_CAP_ENABLE                       (<!id:UsePWM0CH4ENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH4;
															data:false;
															default:false;
															dependencies:PWM0CH45FuncSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Cap4;
															groupName:PWM0 CH4 Capture Configuration;															
															!>)

#define NUCODEGEN_PWM0_CH4_CAP_ADVANCED                     (<!id:UsePWM0CH4AdvanceCapBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:UsePWM0CH4ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap4;
															!>)

#define NUCODEGEN_PWM0_CH4_CAP_RELOAD                        (<!id:UsePWM0CH4CapReloadMultiselect;
															type:select;
															label:Select CH4 reload mode;
															size:5;
															data:PWM_CAPTURE_INT_RISING_LATCH;
															default:PWM_CAPTURE_INT_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_INT_RISING_LATCH , PWM_CAPTURE_INT_FALLING_LATCH, PWM_CAPTURE_INT_RISING_LATCH|PWM_CAPTURE_INT_FALLING_LATCH];
															optionLabels:[Rising reload, Falling reload, Rising and falling reload];
															dependencies:UsePWM0CH4ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap4;
															!>)

#define NUCODEGEN_PWM0_CH4_CAP_INT_SEL		  				(<!id:PWM0CH4CapINTSelect;
															type:select;
															label:Select PWM0 CH4 capture interrupt ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Disable, Rising latch, Falling latch, Rising and falling latch];
															dependencies:UsePWM0CH4AdvanceCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap4;
															!>)

#define NUCODEGEN_PWM0_CH5_CAP_ENABLE         				(<!id:UsePWM0CH5ENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH5;
															data:false;
															default:false;
															dependencies:PWM0CH45FuncSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Cap5;
															groupName:PWM0 CH5 Capture Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH5_CAP_ADVANCED       			    (<!id:UsePWM0CH5AdvanceCapBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:UsePWM0CH5ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_CAP_RELOAD          				(<!id:UsePWM0CH5CapReloadMultiselect;
															type:select;
															label:Select CH5 reload mode;
															size:5;
															data:PWM_CAPTURE_INT_RISING_LATCH;
															default:PWM_CAPTURE_INT_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_INT_RISING_LATCH , PWM_CAPTURE_INT_FALLING_LATCH, PWM_CAPTURE_INT_RISING_LATCH|PWM_CAPTURE_INT_FALLING_LATCH];
															optionLabels:[Rising reload, Falling reload, Rising and falling reload];
															dependencies:UsePWM0CH5ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap5;
															!>)

#define NUCODEGEN_PWM0_CH5_CAP_INT_SEL		  				(<!id:PWM0CH5CapINTSelect;
															type:select;
															label:Select PWM0 CH5 capture interrupt ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Disable, Rising latch, Falling latch, Rising and falling latch];
															dependencies:UsePWM0CH5AdvanceCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap5;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_OUTPUT_FUNC_SETMODE	  		(<!id:PWM0CH45OutputFuncSetmode;
															type:radio;
															label:Select PWM0 CH4 and CH5 output function setting;
															data:0;
															default:0;
															helper:;
															enum:[0, 1];
															optionLabels:[Quick setting, Manual];
															dependencies:UsePWM0CH4ENBoolean|UsePWM0CH5ENBoolean;
															dependenciesOption:{"UsePWM0CH4ENBoolean":"true","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output45;
															groupName:PWM0 CH4 & CH5 Common Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_FREQ			  				(<!id:PWM0CH45FREQInteger;
															type:integer;
															label:The PWM0 CH4 and CH5 frequency(Hz);
															data:1000;
															default:1000;
															helper:Enter frequency between 1~PCLK or 1~PLL_CLK;
															minimum:1;
															maximum:24000000;
															dependencies:PWM0CH45OutputFuncSetmode&(UsePWM0CH4ENBoolean|UsePWM0CH5ENBoolean);
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"0","UsePWM0CH4ENBoolean":"true","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_CLKSRC			  			    (<!id:PWM0CH45CLKSRCSelect;
															type:select;
															label:Select PWM0 CH4 and CH5 clock source;
															data:PWM_CLKSRC_PWM_CLK;
															default:PWM_CLKSRC_PWM_CLK;
															helper:;
															sort:false;
															enum:[PWM_CLKSRC_PWM_CLK, PWM_CLKSRC_TIMER0, PWM_CLKSRC_TIMER1, PWM_CLKSRC_TIMER2, PWM_CLKSRC_TIMER3];
															optionLabels:[PWM0 CLK, TIMER0, TIMER1, TIMER2, TIMER3];
															dependencies:PWM0CH45OutputFuncSetmode&(UsePWM0CH4ENBoolean|UsePWM0CH5ENBoolean);
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_CNTTYPE		  				(<!id:PWM0CH45CNTTypeSelect;
															type:radio;
															label:Select PWM0 CH4 and CH5 counter type;
															data:PWM_UP_COUNTER;
															default:PWM_UP_COUNTER;
															helper:;
															sort:false;
															enum:[PWM_UP_COUNTER, PWM_DOWN_COUNTER, PWM_UP_DOWN_COUNTER];
															optionLabels:[Up Count, Down Count, Up Down Count];
															dependencies:PWM0CH45OutputFuncSetmode&(UsePWM0CH4ENBoolean|UsePWM0CH5ENBoolean);
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_PRESCALER		  				(<!id:PWM0CH45PrescalerInteger;
															type:integer;
															label:The PWM0 CH4 and CH5 counter clock prescaler;
															data:10;
															default:10;
															helper:Enter prescaler between 0x0 ~ 0xFFF;
															minimum:0;
															maximum:4095;
															dependencies:PWM0CH45OutputFuncSetmode&(UsePWM0CH4ENBoolean|UsePWM0CH5ENBoolean);
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_PERIOD			  				(<!id:PWM0CH45PeriodInteger;
															type:integer;
															label:The PWM0 CH4 and CH5 period;
															data:1000;
															default:1000;
															helper:Enter period between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:PWM0CH45OutputFuncSetmode;
															dependenciesOption:1;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_SYNCSTART_ENABLE				(<!id:UsePWM0CH45SyncStartENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 and CH5 synchronous start function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH4AdvanceBoolean&UsePWM0CH5AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH4AdvanceBoolean":"true","UsePWM0CH5AdvanceBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_SYNCSTART_SRC					(<!id:UsePWM0CH45SyncStartSrcSelect;
															type:radio;
															label:Select PWM0 CH4 and CH5 synchronous start source;
															data:PWM_SSCTL_SSRC_PWM0;
															default:PWM_SSCTL_SSRC_PWM0;
															helper:PWM0 only has one source controller, its setting must be the same with other;															
															enum:[PWM_SSCTL_SSRC_PWM0, PWM_SSCTL_SSRC_PWM1];
															optionLabels:[PWM0, PWM1];
															dependencies:UsePWM0CH45SyncStartENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_COMPLEMATARY_ENABLE			(<!id:UsePWM0CH45ComplemataryENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 and CH5 complematary function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH4AdvanceBoolean&UsePWM0CH5AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH4AdvanceBoolean":"true","UsePWM0CH5AdvanceBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_DEADTIME_ENABLE				(<!id:UsePWM0CH45DeadtimeENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 and CH5 deadtime function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH45ComplemataryENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_DEADTIME_CNT					(<!id:PWM0CH45DeadtimeCNTInteger;
															type:integer;
															label:The PWM0 CH4 and CH5 deadtime counter.;
															data:10;
															default:10;
															helper:Enter deadtime counter between 0x0 ~ 0xFFF.;
															minimum:0;
															maximum:4095;
															dependencies:UsePWM0CH45DeadtimeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_DEADTIME_CLKSRC				(<!id:PWM0CH45DeadtimeCLKSRCSelect;
															type:radio;
															label:Select PWM0 CH4 and CH5 dead time clock source;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[PWM0_CLK, Prescaler];
															dependencies:UsePWM0CH45DeadtimeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)

#define NUCODEGEN_PWM0_CH4_5_BRAKE_ENABLE     				(<!id:UsePWM0CH45BrakeENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 and CH5 brake function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH4AdvanceBoolean&UsePWM0CH5AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH4AdvanceBoolean":"true","UsePWM0CH5AdvanceBoolean":"true"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_BRAKE_SRC						<!id:PWM0CH45BrakeSRCMultiselect;
															type:multipleselect;
															label:Select PWM0 CH4 and CH5 brake source ;
															data:PWM_FB_EDGE_BKP0;
															default:PWM_FB_EDGE_BKP0;
															helper:;
															sort:false;
															enum:[PWM_FB_EDGE_BKP0, PWM_FB_EDGE_BKP1, PWM_FB_EDGE_ACMP0, 
															      PWM_FB_EDGE_ACMP1, 0x180, 0x280, 0x480, 0x880];
															optionLabels:[Brake pin0, Brake pin1, ACMP0 output, 
																		  ACMP1 output, CSS detection, BOD detection, SRAM parity error detection, Core lockup detection];
															dependencies:UsePWM0CH45BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>

#define NUCODEGEN_PWM0_CH4_5_BRAKE_DETECT_TYPE				(<!id:PWM0CH45BrakedetecttypeSelect;
															type:radio;
															label:Select PWM0 CH4 and CH5 brake detect type.;
															data:PWM_FB_EDGE;
															default:PWM_FB_EDGE;
															helper:;
															sort:false;
															enum:[PWM_FB_EDGE, PWM_FB_LEVEL];
															optionLabels:[Edge detection, Level detection];
															dependencies:UsePWM0CH45BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_BRAKE_FILTER_ENABLE			(<!id:PWM0CH45BrakefiltetEnBoolen;
															type:checkbox;
															label:Enable PWM0 Brake pin noise filter. ;
															data:false;
															default:false;
															helper:PWM0 only has one filter, its setting must be the same with other;
															sort:false;
															dependencies:PWM0CH45BrakeSRCMultiselect;
															dependenciesOption:{"PWM0CH45BrakeSRCMultiselect":"PWM_FB_EDGE_BKP0|PWM_FB_EDGE_BKP1"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_BRAKE_FILTER_CLK				(<!id:PWM0CH45BrakefilterCLKSelect;
															type:select;
															label:Select PWM0 brake pin filter clock. ;
															data:PWM_NF_CLK_DIV_1;
															default:PWM_NF_CLK_DIV_1;
															helper:;
															sort:false;
															enum:[PWM_NF_CLK_DIV_1, PWM_NF_CLK_DIV_2, PWM_NF_CLK_DIV_4, PWM_NF_CLK_DIV_8, PWM_NF_CLK_DIV_16, PWM_NF_CLK_DIV_32, PWM_NF_CLK_DIV_64, PWM_NF_CLK_DIV_128];
															optionLabels:[HCLK, HCLK/2, HCLK/4, HCLK/8, HCLK/16, HCLK/32, HCLK/64, HCLK/128];
															dependencies:PWM0CH45BrakefiltetEnBoolen;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_BRAKE_FILTER_CNT				(<!id:PWM0CH45BrakefilterCNTINT;
															type:integer;
															label:The PWM0 brake pin detector filter count;
															data:0;
															default:0;
															helper:Enter the filter count between 0x0~0x7.;
															minimum:0;
															maximum:7;
															dependencies:PWM0CH45BrakefiltetEnBoolen;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_5_BRAKE_PIN_INV					(<!id:PWM0CH45BrakepininvEn;
															type:checkbox;
															label:Enable PWM0 Brake pin inverter.;
                                                            data:0;
                                                            default:0; 
                                                            helper:; 
                                                            sort:false;
                                                            enum:[1]; 
                                                            optionLabels:[]; 
															dependencies:PWM0CH45BrakeSRCMultiselect;
															dependenciesOption:{"PWM0CH45BrakeSRCMultiselect":"PWM_FB_EDGE_BKP0|PWM_FB_EDGE_BKP1"};
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_BRAKE_ACTION					    (<!id:PWM0CH4BrakeActionSelect;
															type:select;
															label:Select PWM0 CH4 action when brake happen. ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Nothing, Tri-State, Low level, High level];
															dependencies:UsePWM0CH45BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)

#define NUCODEGEN_PWM0_CH5_BRAKE_ACTION					    (<!id:PWM0CH5BrakeActionSelect;
															type:select;
															label:Select PWM0 CH5 action when brake happen. ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Nothing, Tri-State, Low level, High level];
															dependencies:UsePWM0CH45BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output45;
															!>)
															
#define NUCODEGEN_PWM0_CH4_ENABLE           				(<!id:UsePWM0CH4ENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4.;
															data:false;
															default:false;
															dependencies:PWM0CH45FuncSelect;
															dependenciesOption:0;
															groupId:GroupPWM0Output4;
															groupName:PWM0 CH4 Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH4_ADVANCED         				(<!id:UsePWM0CH4AdvanceBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:PWM0CH45OutputFuncSetmode&UsePWM0CH4ENBoolean;
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_DUTY								(<!id:PWM0CH4DUTYInteger;
															type:integer;
															label:The PWM0 CH4 duty cycle(%);
															data:10;
															default:10;
															helper:Enter duty cycle(0~100%).;
															minimum:0;
															maximum:100;
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"0","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_CMPDATA							(<!id:PWM0CH4CmpdataInteger;
															type:integer;
															label:The PWM0 CH4 comparator ;
															data:1000;
															default:1000;
															helper:Enter comparator between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)

#define NUCODEGEN_PWM0_CH4_WAVEOUT_PERIOD					(<!id:PWM0CH4WaveOutPeriodSelect;
															type:radio;
															label:The PWM0 CH4 period point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_WAVEOUT_ZERO						(<!id:PWM0CH4WaveOutZeroSelect;
															type:radio;
															label:The PWM0 CH4 zero point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_WAVEOUT_CMPUP					(<!id:PWM0CH4WaveOutCmpUpSelect;
															type:radio;
															label:The PWM0 CH4 compare up point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45CNTTypeSelect, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45CNTTypeSelect":"PWM_UP_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_WAVEOUT_CMPDOWN					(<!id:PWM0CH4WaveOutCmpDownSelect;
															type:radio;
															label:The PWM0 CH4 compare down point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45CNTTypeSelect, UsePWM0CH4ENBoolean];
															dependenciesOption:{"PWM0CH45CNTTypeSelect":"PWM_DOWN_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH4ENBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_LOAD_MODE						(<!id:PWM0CH4LoadModeSelect;
															type:radio;
															label:Select PWM0 CH4 loading mode ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Period mode, Immidiate mode, Center mode];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH4AdvanceBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH4AdvanceBoolean":"true"};
															groupId:GroupPWM0Output4;
															!>)
																														
#define NUCODEGEN_PWM0_CH4_OTHER_OUTPUT						(<!id:PWM0CH4otherOutputSelect;
															type:radio;
															label:The PWM0 CH4 other output behavior ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Disable, Mask, Inverter];
															dependencies:UsePWM0CH4AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_MASK_DATA						(<!id:PWM0CH4MaskDataSelect;
															type:radio;
															label:The PWM0 CH4 mask data ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[Low, High];
															dependencies:PWM0CH4otherOutputSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_TRIGER_ADC_ENABLE   			(<!id:UsePWM0CH4TrigerADCENBoolean;
															type:checkbox;
															label:Enable PWM0 CH4 trigger ADC.;
															data:false;
															default:false;
															dependencies:UsePWM0CH4AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_TRIGER_ADCSRC					(<!id:UsePWM0CH4TrigerADCSrcSelect;
															type:select;
															label:Select condition to trigger ADC;
															data:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															default:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															helper:;
															sort:false;
															enum:[PWM_TRIGGER_ADC_EVEN_ZERO_POINT, PWM_TRIGGER_ADC_EVEN_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT];
															optionLabels:[CH4 zero point, CH4 period , CH4 zero or period point, CH4 up count CMPDAT point, CH4 down count CMPDAT point, CH5 up count CMPDAT point, CH5 down count CMPDAT point];
															vertical:false;
															dependencies:UsePWM0CH4TrigerADCENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output4;
															!>)
															
#define NUCODEGEN_PWM0_CH4_INT_SEL							<!id:PWM0CH4INTSelect;
															type:multipleselect;
															label:Select PWM0 CH4 interrupt ;
															data:;
															default:;
															helper:;
															sort:false;
															enum:[1, 2, 4, 8, 16];
															optionLabels:[Zero, Period, Cmpup, Cmpdown, Brake];
															dependencies:UsePWM0CH4AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output4;
															!>
															
#define NUCODEGEN_PWM0_CH5_ENABLE       			        (<!id:UsePWM0CH5ENBoolean;
															type:checkbox;
															label:Enable PWM0 CH5.;
															data:false;
															default:false;
															dependencies:PWM0CH45FuncSelect;
															dependenciesOption:0;
															groupId:GroupPWM0Output5;
															groupName:PWM0 CH5 Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH5_ADVANCED     			        (<!id:UsePWM0CH5AdvanceBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:[PWM0CH45OutputFuncSetmode,UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_DUTY							    (<!id:PWM0CH5DUTYInteger;
															type:integer;
															label:The PWM0 CH5 duty cycle(%);
															data:10;
															default:10;
															helper:Enter duty cycle(0~100%).;
															minimum:0;
															maximum:100;
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"0","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_CMPDATA						    (<!id:PWM0CH5CmpdataInteger;
															type:integer;
															label:The PWM0 CH5 comparator ;
															data:1000;
															default:1000;
															helper:Enter comparator between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_WAVEOUT_PERIOD					(<!id:PWM0CH5WaveOutPeriodSelect;
															type:radio;
															label:The PWM0 CH5 period point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_WAVEOUT_ZERO					    (<!id:PWM0CH5WaveOutZeroSelect;
															type:radio;
															label:The PWM0 CH5 zero point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_WAVEOUT_CMPUP					(<!id:PWM0CH5WaveOutCmpUpSelect;
															type:radio;
															label:The PWM0 CH5 compare up point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45CNTTypeSelect, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45CNTTypeSelect":"PWM_UP_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_WAVEOUT_CMPDOWN					(<!id:PWM0CH5WaveOutCmpDownSelect;
															type:radio;
															label:The PWM0 CH5 compare down point output behavior ;
															data:PWM_OUTPUT_HIGH;
															default:PWM_OUTPUT_HIGH;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH45CNTTypeSelect, UsePWM0CH5ENBoolean];
															dependenciesOption:{"PWM0CH45CNTTypeSelect":"PWM_DOWN_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH5ENBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_LOAD_MODE						(<!id:PWM0CH5LoadModeSelect;
															type:radio;
															label:Select PWM0 CH5 loading mode ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Period mode, Immidiate mode, Center mode];
															dependencies:[PWM0CH45OutputFuncSetmode, UsePWM0CH5AdvanceBoolean];
															dependenciesOption:{"PWM0CH45OutputFuncSetmode":"1","UsePWM0CH5AdvanceBoolean":"true"};
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_OTHER_OUTPUT						(<!id:PWM0CH5otherOutputSelect;
															type:radio;
															label:The PWM0 CH5 other output behavior ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Disable, Mask, Inverter];
															dependencies:UsePWM0CH5AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_MASK_DATA						(<!id:PWM0CH5MaskDataSelect;
															type:radio;
															label:The PWM0 CH5 mask data ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[Low, High];
															dependencies:PWM0CH5otherOutputSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_TRIGER_ADC_ENABLE   			(<!id:UsePWM0CH5TrigerADCENBoolean;
															type:checkbox;
															label:Enable PWM0 CH5 trigger ADC.;
															data:false;
															default:false;
															dependencies:UsePWM0CH5AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_TRIGER_ADCSRC					(<!id:UsePWM0CH5TrigerADCSrcSelect;
															type:select;
															label:Select condition to trigger ADC;
															data:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															default:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															helper:;
															sort:false;
															enum:[PWM_TRIGGER_ADC_EVEN_ZERO_POINT, PWM_TRIGGER_ADC_EVEN_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT];
															optionLabels:[CH4 zero point, CH4 period , CH4 zero or period point, CH4 up count CMPDAT point, CH4 down count CMPDAT point, CH5 up count CMPDAT point, CH5 down count CMPDAT point];
															vertical:false;
															dependencies:UsePWM0CH5TrigerADCENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output5;
															!>)
															
#define NUCODEGEN_PWM0_CH5_INT_SEL							<!id:PWM0CH5INTSelect;
															type:multipleselect;
															label:Select PWM0 CH5 interrupt ;
															data:;
															default:;
															helper:;
															sort:false;
															enum:[4, 8, 16];
															optionLabels:[Cmpup, Cmpdown, Brake];
															dependencies:UsePWM0CH5AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output5;
															!>