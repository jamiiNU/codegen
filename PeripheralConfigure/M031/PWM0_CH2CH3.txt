/*--------------------------------------------------------------------------*/
/* PWM0 CH2CH3 Configuration                                                */
/*--------------------------------------------------------------------------*/

<!clock: {"ALL" : "PWM0" }; !>
<!pin:   {"UsePWM0CH2ENCapBoolean" : {"true" : ["PWM0_CH2"]} ,
		  "UsePWM0CH3ENCapBoolean" : {"true" : ["PWM0_CH3"]} ,
		  "UsePWM0CH2ENBoolean" : {"true" : ["PWM0_CH2"]} ,
		  "UsePWM0CH3ENBoolean" : {"true" : ["PWM0_CH3"]} }; 
		  !>

#define NUCODEGEN_PWM0_CH2_3_FUNC_SEL						(<!id:PWM0CH23FuncSelect;
															type:radio;
															label:Select PWM0 CH2 and CH3 function;
															data:0;
															default:0;
															helper:;
															enum:[0, 1];
															optionLabels:[PWM output waveform, PWM capture];
															dependencies:none;
															dependenciesOption:none;
														    !>)

#define NUCODEGEN_PWM0_CH2_3_CAP_UNITTIME					(<!id:PWM0CH23CapUnitTimeInterger;
															type:integer;
															label:The unit time of counter(ns). ;
															data:1000;
															default:1000;
															helper: It is limited by clock source.;
															minimum:10;
															maximum:85000;
															dependencies:UsePWM0CH2ENCapBoolean|UsePWM0CH3ENCapBoolean;
															dependenciesOption:{"UsePWM0CH2ENCapBoolean":"true","UsePWM0CH3ENCapBoolean":"true"};
															groupId:GroupPWM0Cap23;
															groupName:PWM0 CH2 & CH3 Common Capture Configuration;
															!>)

#define NUCODEGEN_PWM0_CH2_3_CAP_PDMA_ENABLE    			(<!id:UsePWM0CH23PDMAENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 and CH3 with PDMA function;
															data:false;
															default:false;
															dependencies:UsePWM0CH2AdvanceCapBoolean|UsePWM0CH3AdvanceCapBoolean;
															dependenciesOption:{"UsePWM0CH2AdvanceCapBoolean":"true","UsePWM0CH3AdvanceCapBoolean":"true"};
															groupId:GroupPWM0Cap23;
															!>)

#define NUCODEGEN_PWM0_CH2_3_CAP_PDMA_CH_SEL				(<!id:UsePWM0CH23CapPDMACHSel;
															type:radio;
															label:Select PWM0 CH2 capture data or CH3 to PDMA.;
															size:5;
															data:2;
															default:2;
															sort:false;
															enum:[2, 3];
															optionLabels:[CH2, CH3];
															dependencies:[UsePWM0CH23PDMAENCapBoolean, UsePWM0CH2AdvanceCapBoolean, UsePWM0CH3AdvanceCapBoolean];
															dependenciesOption:{"UsePWM0CH23PDMAENCapBoolean":"true","UsePWM0CH2AdvanceCapBoolean":"true","UsePWM0CH3AdvanceCapBoolean":"true"};
															groupId:GroupPWM0Cap23;
															!>)

#define NUCODEGEN_PWM0_CH2_3_CAP_PDMA_DATA_SEL 	            (<!id:UsePWM0CH2CapPDMADataSel;
															type:select;
															label:Select RCAPDATA or FCAPDATA to PDMA.;
															size:5;
															data:PWM_CAPTURE_PDMA_RISING_LATCH;
															default:PWM_CAPTURE_PDMA_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_PDMA_RISING_LATCH, PWM_CAPTURE_PDMA_FALLING_LATCH, PWM_CAPTURE_PDMA_RISING_FALLING_LATCH];
															optionLabels:[RCAPDATA, FCAPDATA, RCAPDATA and FCAPDATA] ;
															dependencies:UsePWM0CH23PDMAENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap23;
															!>)

#define NUCODEGEN_PWM0_CH2_3_CAP_PDMA_FIRST_SEL 	        (<!id:UsePWM0CH2CapPDMAFirstSel;
															type:select;
															label: Select the capture order is rising or falling first.;
															size:5;
															data:0;
															default:0;
															sort:false;
															enum:[0, 1];
															optionLabels:[Falling, Rising] ;
															dependencies:UsePWM0CH23PDMAENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap23;
															!>)															
															
#define NUCODEGEN_PWM0_CH2_CAP_ENABLE                       (<!id:UsePWM0CH2ENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH2;
															data:false;
															default:false;
															dependencies:PWM0CH23FuncSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Cap2;
															groupName:PWM0 CH2 Capture Configuration;															
															!>)

#define NUCODEGEN_PWM0_CH2_CAP_ADVANCED                     (<!id:UsePWM0CH2AdvanceCapBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:UsePWM0CH2ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap2;
															!>)

#define NUCODEGEN_PWM0_CH2_CAP_RELOAD                        (<!id:UsePWM0CH2CapReloadMultiselect;
															type:select;
															label:Select CH2 reload mode;
															size:5;
															data:PWM_CAPTURE_INT_RISING_LATCH;
															default:PWM_CAPTURE_INT_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_INT_RISING_LATCH , PWM_CAPTURE_INT_FALLING_LATCH, PWM_CAPTURE_INT_RISING_LATCH|PWM_CAPTURE_INT_FALLING_LATCH];
															optionLabels:[Rising reload, Falling reload, Rising and falling reload];
															dependencies:UsePWM0CH2ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap2;
															!>)

#define NUCODEGEN_PWM0_CH2_CAP_INT_SEL		  				(<!id:PWM0CH2CapINTSelect;
															type:select;
															label:Select PWM0 CH2 capture interrupt ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Disable, Rising latch, Falling latch, Rising and falling latch];
															dependencies:UsePWM0CH2AdvanceCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap2;
															!>)

#define NUCODEGEN_PWM0_CH3_CAP_ENABLE         				(<!id:UsePWM0CH3ENCapBoolean;
															type:checkbox;
															label:Enable PWM0 CH3;
															data:false;
															default:false;
															dependencies:PWM0CH23FuncSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Cap3;
															groupName:PWM0 CH3 Capture Configuration;																
															!>)
															
#define NUCODEGEN_PWM0_CH3_CAP_ADVANCED       			    (<!id:UsePWM0CH3AdvanceCapBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:UsePWM0CH3ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_CAP_RELOAD          				(<!id:UsePWM0CH3CapReloadMultiselect;
															type:select;
															label:Select CH3 reload mode;
															size:5;
															data:PWM_CAPTURE_INT_RISING_LATCH;
															default:PWM_CAPTURE_INT_RISING_LATCH;
															sort:false;
															enum:[PWM_CAPTURE_INT_RISING_LATCH , PWM_CAPTURE_INT_FALLING_LATCH, PWM_CAPTURE_INT_RISING_LATCH|PWM_CAPTURE_INT_FALLING_LATCH];
															optionLabels:[Rising reload, Falling reload, Rising and falling reload];
															dependencies:UsePWM0CH3ENCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap3;
															!>)

#define NUCODEGEN_PWM0_CH3_CAP_INT_SEL		  				(<!id:PWM0CH3CapINTSelect;
															type:select;
															label:Select PWM0 CH3 capture interrupt ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Disable, Rising latch, Falling latch, Rising and falling latch];
															dependencies:UsePWM0CH3AdvanceCapBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Cap3;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_OUTPUT_FUNC_SETMODE	  		(<!id:PWM0CH23OutputFuncSetmode;
															type:radio;
															label:Select PWM0 CH2 and CH3 output function setting;
															data:0;
															default:0;
															helper:;
															enum:[0, 1];
															optionLabels:[Quick setting, Manual];
															dependencies:UsePWM0CH2ENBoolean|UsePWM0CH3ENBoolean;
															dependenciesOption:{"UsePWM0CH2ENBoolean":"true","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output23;
															groupName:PWM0 CH2 & CH3 Common Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_FREQ			  				(<!id:PWM0CH23FREQInteger;
															type:integer;
															label:The PWM0 CH2 and CH3 frequency(Hz);
															data:1000;
															default:1000;
															helper:Enter frequency between 1~PCLK or 1~PLL_CLK;
															minimum:1;
															maximum:24000000;
															dependencies:PWM0CH23OutputFuncSetmode&(UsePWM0CH2ENBoolean|UsePWM0CH3ENBoolean);
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"0","UsePWM0CH2ENBoolean":"true","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_CLKSRC			  			    (<!id:PWM0CH23CLKSRCSelect;
															type:select;
															label:Select PWM0 CH2 and CH3 clock source;
															data:PWM_CLKSRC_PWM_CLK;
															default:PWM_CLKSRC_PWM_CLK;
															helper:;
															sort:false;
															enum:[PWM_CLKSRC_PWM_CLK, PWM_CLKSRC_TIMER0, PWM_CLKSRC_TIMER1, PWM_CLKSRC_TIMER2, PWM_CLKSRC_TIMER3];
															optionLabels:[PWM0 CLK, TIMER0, TIMER1, TIMER2, TIMER3];
															dependencies:PWM0CH23OutputFuncSetmode&(UsePWM0CH2ENBoolean|UsePWM0CH3ENBoolean);
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_CNTTYPE		  				(<!id:PWM0CH23CNTTypeSelect;
															type:radio;
															label:Select PWM0 CH2 and CH3 counter type;
															data:PWM_UP_COUNTER;
															default:PWM_UP_COUNTER;
															helper:;
															sort:false;
															enum:[PWM_UP_COUNTER, PWM_DOWN_COUNTER, PWM_UP_DOWN_COUNTER];
															optionLabels:[Up count, Down count, Up down count];
															dependencies:PWM0CH23OutputFuncSetmode&(UsePWM0CH2ENBoolean|UsePWM0CH3ENBoolean);
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_PRESCALER		  				(<!id:PWM0CH23PrescalerInteger;
															type:integer;
															label:The PWM0 CH2 and CH3 counter clock prescaler;
															data:10;
															default:10;
															helper:Enter prescaler between 0x0 ~ 0xFFF;
															minimum:0;
															maximum:4095;
															dependencies:PWM0CH23OutputFuncSetmode&(UsePWM0CH2ENBoolean|UsePWM0CH3ENBoolean);
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_PERIOD			  				(<!id:PWM0CH23PeriodInteger;
															type:integer;
															label:The PWM0 CH2 and CH3 period;
															data:1000;
															default:1000;
															helper:Enter period between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:PWM0CH23OutputFuncSetmode;
															dependenciesOption:1;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_SYNCSTART_ENABLE				(<!id:UsePWM0CH23SyncStartENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 and CH3 synchronous start function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH2AdvanceBoolean&UsePWM0CH3AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH2AdvanceBoolean":"true","UsePWM0CH3AdvanceBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_SYNCSTART_SRC					(<!id:UsePWM0CH23SyncStartSrcSelect;
															type:radio;
															label:Select PWM0 CH2 and CH3 synchronous start source;
															data:PWM_SSCTL_SSRC_PWM0;
															default:PWM_SSCTL_SSRC_PWM0;
															helper:PWM0 only has one source controller, its setting must be the same with other;															
															enum:[PWM_SSCTL_SSRC_PWM0, PWM_SSCTL_SSRC_PWM1];
															optionLabels:[PWM0, PWM1];
															dependencies:UsePWM0CH23SyncStartENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_COMPLEMATARY_ENABLE			(<!id:UsePWM0CH23ComplemataryENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 and CH3 complematary function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH2AdvanceBoolean&UsePWM0CH3AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH2AdvanceBoolean":"true","UsePWM0CH3AdvanceBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_DEADTIME_ENABLE				(<!id:UsePWM0CH23DeadtimeENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 and CH3 deadtime function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH23ComplemataryENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_DEADTIME_CNT					(<!id:PWM0CH23DeadtimeCNTInteger;
															type:integer;
															label:The PWM0 CH2 and CH3 deadtime counter.;
															data:10;
															default:10;
															helper:Enter deadtime counter between 0x0 ~ 0xFFF.;
															minimum:0;
															maximum:4095;
															dependencies:UsePWM0CH23DeadtimeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_DEADTIME_CLKSRC				(<!id:PWM0CH23DeadtimeCLKSRCSelect;
															type:radio;
															label:Select PWM0 CH2 and CH3 dead time clock source;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[PWM0_CLK, Prescaler];
															dependencies:UsePWM0CH23DeadtimeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)

#define NUCODEGEN_PWM0_CH2_3_BRAKE_ENABLE     				(<!id:UsePWM0CH23BrakeENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 and CH3 brake function.;
															data:false;
															default:false;
															dependencies:UsePWM0CH2AdvanceBoolean&UsePWM0CH3AdvanceBoolean;
															dependenciesOption:{"UsePWM0CH2AdvanceBoolean":"true","UsePWM0CH3AdvanceBoolean":"true"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_BRAKE_SRC						<!id:PWM0CH23BrakeSRCMultiselect;
															type:multipleselect;
															label:Select PWM0 CH2 and CH3 brake source ;
															data:PWM_FB_EDGE_BKP0;
															default:PWM_FB_EDGE_BKP0;
															helper:;
															sort:false;
															enum:[PWM_FB_EDGE_BKP0, PWM_FB_EDGE_BKP1, PWM_FB_EDGE_ACMP0, 
															      PWM_FB_EDGE_ACMP1, 0x180, 0x280, 0x480, 0x880];
															optionLabels:[Brake pin0, Brake pin1, ACMP0 output, 
																		  ACMP1 output, CSS detection, BOD detection, SRAM parity error detection, Core lockup detection];
															dependencies:UsePWM0CH23BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>

#define NUCODEGEN_PWM0_CH2_3_BRAKE_DETECT_TYPE				(<!id:PWM0CH23BrakedetecttypeSelect;
															type:radio;
															label:Select PWM0 CH2 and CH3 brake detect type.;
															data:PWM_FB_EDGE;
															default:PWM_FB_EDGE;
															helper:;
															sort:false;
															enum:[PWM_FB_EDGE, PWM_FB_LEVEL];
															optionLabels:[Edge detection, Level detection];
															dependencies:UsePWM0CH23BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_BRAKE_FILTER_ENABLE			(<!id:PWM0CH23BrakefiltetEnBoolen;
															type:checkbox;
															label:Enable PWM0 Brake pin noise filter. ;
															data:false;
															default:false;
															helper:PWM0 only has one filter, its setting must be the same with other;
															sort:false;
															dependencies:PWM0CH23BrakeSRCMultiselect;
															dependenciesOption:{"PWM0CH23BrakeSRCMultiselect":"PWM_FB_EDGE_BKP0|PWM_FB_EDGE_BKP1"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_BRAKE_FILTER_CLK				(<!id:PWM0CH23BrakefilterCLKSelect;
															type:select;
															label:Select PWM0 brake pin filter clock. ;
															data:PWM_NF_CLK_DIV_1;
															default:PWM_NF_CLK_DIV_1;
															helper:;
															sort:false;
															enum:[PWM_NF_CLK_DIV_1, PWM_NF_CLK_DIV_2, PWM_NF_CLK_DIV_4, PWM_NF_CLK_DIV_8, PWM_NF_CLK_DIV_16, PWM_NF_CLK_DIV_32, PWM_NF_CLK_DIV_64, PWM_NF_CLK_DIV_128];
															optionLabels:[HCLK, HCLK/2, HCLK/4, HCLK/8, HCLK/16, HCLK/32, HCLK/64, HCLK/128];
															dependencies:PWM0CH23BrakefiltetEnBoolen;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_BRAKE_FILTER_CNT				(<!id:PWM0CH23BrakefilterCNTINT;
															type:integer;
															label:The PWM0 brake pin detector filter count;
															data:0;
															default:0;
															helper:Enter the filter count between 0x0~0x7.;
															minimum:0;
															maximum:7;
															dependencies:PWM0CH23BrakefiltetEnBoolen;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_3_BRAKE_PIN_INV					(<!id:PWM0CH23BrakepininvEn;
															type:checkbox;
															label:Enable PWM0 Brake pin inverter.;
															data:0;
                                                            default:0; 
                                                            helper:; 
                                                            sort:false;
                                                            enum:[1]; 
                                                            optionLabels:[];
															dependencies:PWM0CH23BrakeSRCMultiselect;
															dependenciesOption:{"PWM0CH23BrakeSRCMultiselect":"PWM_FB_EDGE_BKP0|PWM_FB_EDGE_BKP1"};
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_BRAKE_ACTION					    (<!id:PWM0CH2BrakeActionSelect;
															type:select;
															label:Select PWM0 CH2 action when brake happen. ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Nothing, Tri-State, Low level, High level];
															dependencies:UsePWM0CH23BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)

#define NUCODEGEN_PWM0_CH3_BRAKE_ACTION					    (<!id:PWM0CH3BrakeActionSelect;
															type:select;
															label:Select PWM0 CH3 action when brake happen. ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2, 3];
															optionLabels:[Nothing, Tri-State, Low level, High level];
															dependencies:UsePWM0CH23BrakeENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output23;
															!>)
															
#define NUCODEGEN_PWM0_CH2_ENABLE           				(<!id:UsePWM0CH2ENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2.;
															data:false;
															default:false;
															dependencies:PWM0CH23FuncSelect;
															dependenciesOption:0;
															groupId:GroupPWM0Output2;
															groupName:PWM0 CH2 Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH2_ADVANCED         				(<!id:UsePWM0CH2AdvanceBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:PWM0CH23OutputFuncSetmode&UsePWM0CH2ENBoolean;
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_DUTY								(<!id:PWM0CH2DUTYInteger;
															type:integer;
															label:The PWM0 CH2 duty cycle(%);
															data:10;
															default:10;
															helper:Enter duty cycle(0~100%).;
															minimum:0;
															maximum:100;
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"0","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_CMPDATA							(<!id:PWM0CH2CmpdataInteger;
															type:integer;
															label:The PWM0 CH2 comparator ;
															data:1000;
															default:1000;
															helper:Enter comparator between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)

#define NUCODEGEN_PWM0_CH2_WAVEOUT_PERIOD					(<!id:PWM0CH2WaveOutPeriodSelect;
															type:radio;
															label:The PWM0 CH2 period point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_WAVEOUT_ZERO						(<!id:PWM0CH2WaveOutZeroSelect;
															type:radio;
															label:The PWM0 CH2 zero point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_WAVEOUT_CMPUP					(<!id:PWM0CH2WaveOutCmpUpSelect;
															type:radio;
															label:The PWM0 CH2 compare up point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23CNTTypeSelect, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23CNTTypeSelect":"PWM_UP_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_WAVEOUT_CMPDOWN					(<!id:PWM0CH2WaveOutCmpDownSelect;
															type:radio;
															label:The PWM0 CH2 compare down point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23CNTTypeSelect, UsePWM0CH2ENBoolean];
															dependenciesOption:{"PWM0CH23CNTTypeSelect":"PWM_DOWN_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH2ENBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_LOAD_MODE						(<!id:PWM0CH2LoadModeSelect;
															type:radio;
															label:Select PWM0 CH2 loading mode ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Period mode, Immidiate mode, Center mode];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH2AdvanceBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH2AdvanceBoolean":"true"};
															groupId:GroupPWM0Output2;
															!>)
																														
#define NUCODEGEN_PWM0_CH2_OTHER_OUTPUT						(<!id:PWM0CH2otherOutputSelect;
															type:radio;
															label:The PWM0 CH2 other output behavior ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Disable, Mask, Inverter];
															dependencies:UsePWM0CH2AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_MASK_DATA						(<!id:PWM0CH2MaskDataSelect;
															type:radio;
															label:The PWM0 CH2 mask data ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[Low, High];
															dependencies:PWM0CH2otherOutputSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Output2;
															!>)
																														
#define NUCODEGEN_PWM0_CH2_TRIGER_ADC_ENABLE   			(<!id:UsePWM0CH2TrigerADCENBoolean;
															type:checkbox;
															label:Enable PWM0 CH2 trigger ADC.;
															data:false;
															default:false;
															dependencies:UsePWM0CH2AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_TRIGER_ADCSRC					(<!id:UsePWM0CH2TrigerADCSrcSelect;
															type:select;
															label:Select condition to trigger ADC;
															data:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															default:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															helper:;
															sort:false;
															enum:[PWM_TRIGGER_ADC_EVEN_ZERO_POINT, PWM_TRIGGER_ADC_EVEN_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT];
															optionLabels:[CH2 zero point, CH2 period , CH2 zero or period point, CH2 up count CMPDAT point, CH2 down count CMPDAT point, CH3 up count CMPDAT point, CH3 down count CMPDAT point];
															vertical:false;
															dependencies:UsePWM0CH2TrigerADCENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output2;
															!>)
															
#define NUCODEGEN_PWM0_CH2_INT_SEL							<!id:PWM0CH2INTSelect;
															type:multipleselect;
															label:Select PWM0 CH2 interrupt ;
															data:;
															default:;
															helper:;
															sort:false;
															enum:[1, 2, 4, 8, 16];
															optionLabels:[Zero, Period, Cmpup, Cmpdown, Brake];
															dependencies:UsePWM0CH2AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output2;
															!>	
															
#define NUCODEGEN_PWM0_CH3_ENABLE       			        (<!id:UsePWM0CH3ENBoolean;
															type:checkbox;
															label:Enable PWM0 CH3.;
															data:false;
															default:false;
															dependencies:PWM0CH23FuncSelect;
															dependenciesOption:0;
															groupId:GroupPWM0Output3;
															groupName:PWM0 CH3 Output Configuration;															
															!>)
															
#define NUCODEGEN_PWM0_CH3_ADVANCED     			        (<!id:UsePWM0CH3AdvanceBoolean;
															type:checkbox;
															label:Advanced configuration;
															data:false;
															default:false;
															dependencies:[PWM0CH23OutputFuncSetmode,UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_DUTY							    (<!id:PWM0CH3DUTYInteger;
															type:integer;
															label:The PWM0 CH3 duty cycle(%);
															data:10;
															default:10;
															helper:Enter duty cycle(0~100%).;
															minimum:0;
															maximum:100;
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"0","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_CMPDATA						    (<!id:PWM0CH3CmpdataInteger;
															type:integer;
															label:The PWM0 CH3 comparator ;
															data:1000;
															default:1000;
															helper:Enter comparator between 0x0 ~ 0xFFFF;
															minimum:0;
															maximum:65535;
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)

#define NUCODEGEN_PWM0_CH3_WAVEOUT_PERIOD					(<!id:PWM0CH3WaveOutPeriodSelect;
															type:radio;
															label:The PWM0 CH3 period point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_WAVEOUT_ZERO					    (<!id:PWM0CH3WaveOutZeroSelect;
															type:radio;
															label:The PWM0 CH3 zero point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_WAVEOUT_CMPUP					(<!id:PWM0CH3WaveOutCmpUpSelect;
															type:radio;
															label:The PWM0 CH3 compare up point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23CNTTypeSelect, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23CNTTypeSelect":"PWM_UP_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_WAVEOUT_CMPDOWN					(<!id:PWM0CH3WaveOutCmpDownSelect;
															type:radio;
															label:The PWM0 CH3 compare down point output behavior ;
															data:PWM_OUTPUT_NOTHING;
															default:PWM_OUTPUT_NOTHING;
															helper:;
															sort:false;
															enum:[PWM_OUTPUT_NOTHING, PWM_OUTPUT_LOW, PWM_OUTPUT_HIGH, PWM_OUTPUT_TOGGLE];
															optionLabels:[Nothing, Low, High, Toggle];
															dependencies:[PWM0CH23CNTTypeSelect, UsePWM0CH3ENBoolean];
															dependenciesOption:{"PWM0CH23CNTTypeSelect":"PWM_DOWN_COUNTER|PWM_UP_DOWN_COUNTER","UsePWM0CH3ENBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)

#define NUCODEGEN_PWM0_CH3_LOAD_MODE						(<!id:PWM0CH3LoadModeSelect;
															type:radio;
															label:Select PWM0 CH3 loading mode ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Period mode, Immidiate mode, Center mode];
															dependencies:[PWM0CH23OutputFuncSetmode, UsePWM0CH3AdvanceBoolean];
															dependenciesOption:{"PWM0CH23OutputFuncSetmode":"1","UsePWM0CH3AdvanceBoolean":"true"};
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_OTHER_OUTPUT						(<!id:PWM0CH3otherOutputSelect;
															type:radio;
															label:The PWM0 CH3 other output behavior ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1, 2];
															optionLabels:[Disable, Mask, Inverter];
															dependencies:UsePWM0CH3AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_MASK_DATA						(<!id:PWM0CH3MaskDataSelect;
															type:radio;
															label:The PWM0 CH3 mask data ;
															data:0;
															default:0;
															helper:;
															sort:false;
															enum:[0, 1];
															optionLabels:[Low, High];
															dependencies:PWM0CH3otherOutputSelect;
															dependenciesOption:1;
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_TRIGER_ADC_ENABLE   			(<!id:UsePWM0CH3TrigerADCENBoolean;
															type:checkbox;
															label:Enable PWM0 CH3 trigger ADC.;
															data:false;
															default:false;
															dependencies:UsePWM0CH3AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_TRIGER_ADCSRC					(<!id:UsePWM0CH3TrigerADCSrcSelect;
															type:select;
															label:Select condition to trigger ADC;
															data:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															default:PWM_TRIGGER_ADC_EVEN_ZERO_POINT;
															helper:;
															sort:false;
															enum:[PWM_TRIGGER_ADC_EVEN_ZERO_POINT, PWM_TRIGGER_ADC_EVEN_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT, PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT];
															optionLabels:[CH2 zero point, CH2 period , CH2 zero or period point, CH2 up count CMPDAT point, CH2 down count CMPDAT point, CH3 up count CMPDAT point, CH3 down count CMPDAT point];
															vertical:false;
															dependencies:UsePWM0CH3TrigerADCENBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output3;
															!>)
															
#define NUCODEGEN_PWM0_CH3_INT_SEL							<!id:PWM0CH3INTSelect;
															type:multipleselect;
															label:Select PWM0 CH3 interrupt ;
															data:;
															default:;
															helper:;
															sort:false;
															enum:[4, 8, 16];
															optionLabels:[Cmpup, Cmpdown, Brake];
															dependencies:UsePWM0CH3AdvanceBoolean;
															dependenciesOption:true;
															groupId:GroupPWM0Output3;
															!>